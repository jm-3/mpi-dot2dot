#!/usr/bin/perl -w

use strict;
use Getopt::Long qw(:config pass_through require_order);
use Config::Auto;
use Data::Dumper;
use Switch;
require "$ENV{\"LMOD_PKG\"}/init/perl";

my $numcores=1;
my $mem=120000;
my $help=0;
my $BATCHARGS="";
my $nomail=0;
my $short=0;
my $onlyfaster=0;
my $family="";
my $minfamily="";
my $time="";
my $mpi=0;
my $jobname="";
my $hybrid=0;
my $hybrid_variable=0;

GetOptions('help|h' => \$help,
        'cpus-per-task|c=i' => \$numcores,
        'mem|m=i' => \$mem,
        'nomail' => \$nomail,
        'short' => \$short,
        'use-only-faster-nodes' => \$onlyfaster,
        'family=s' => \$family,
        'min-family=s' => \$minfamily,
        'time|t=s' => \$time,
        'jobname=s' => \$jobname,
        'mpi' => \$mpi,
        'hybrid' => \$hybrid,
        'hybrid-variable' => \$hybrid_variable);
showhelp() if $help;

if($#ARGV+1<1){
        print STDERR "ERROR: Debe especificar el nombre del programa\n";
        showhelp();
}


if($ARGV[0] =~ /^-/){ # si empieza con -, se trata de parametros. Extraemos hasta encontrar --
        while($ARGV[0] && $ARGV[0] !~ /^--$/){
                $BATCHARGS.=$ARGV[0]." ";
                shift;
        }

}
if(!$ARGV[0]){
        print STDERR "ERROR: sintaxis incorrecta\n";
        exit 0;
}
shift if $ARGV[0] eq '--';
my $programname = $ARGV[0];
$programname =~ s/^\.\///; # eliminar el ./ inicial para usarlo en el nombre del archivo

my $SCRIPT=$programname.".slurmscript";
open(my $fh, '>', $SCRIPT);

print $fh "#!/bin/bash\n";
if(!$jobname){
        $jobname=$programname;
}
print $fh "#SBATCH -J $jobname\t# Job name\n";
print $fh "#SBATCH -o $programname.%j.out\t# Name of stdout output file(%j expands to jobId)\n";
print $fh "#SBATCH -e $programname.%j.err\t# Name of stderr output file(%j expands to jobId)\n";
if($mpi){
        printf $fh "#SBATCH -n $numcores\n";
        if($numcores > 24){
                print $fh "#SBATCH --ntasks-per-node=24\n";
        }else{
                print $fh "#SBATCH --ntasks-per-node=$numcores\n";
        }
}elsif($hybrid){
        if($numcores % 2 == 0){
                my $numprocs = $numcores / 2;
                print $fh "#SBATCH -n $numprocs\n";
                print $fh "#SBATCH --ntasks-per-node=12\n";
                print $fh "#SBATCH -c 2\n";
        }else{
                print $fh "#SBATCH -n 1\n";
                print $fh "#SBATCH --ntasks-per-node=1\n";
                print $fh "#SBATCH -c $numcores\n";
        }
}elsif($hybrid_variable){
        if($numcores < 12){
                my $procpernode;
                if($numcores == 1 || $numcores == 2){
                        $procpernode=1;
                }else{
                        $procpernode=2;
                }
                print $fh "#SBATCH -n $procpernode\n";
                print $fh "#SBATCH --ntasks-per-node=$procpernode\n";
                my $cores=$numcores/$procpernode;
                print $fh "#SBATCH -c $cores\n";
        }else{
                my $numprocs = $numcores / 6;
                print $fh "#SBATCH -n $numprocs\n";
                print $fh "#SBATCH --ntasks-per-node=4\n";
                print $fh "#SBATCH -c 6\n";
        }
}else{
        print $fh "#SBATCH -n 1\n";
        print $fh "#SBATCH --ntasks-per-node=1\n";
        if($numcores > 24){
                print $fh "#SBATCH -c 24\n";
        }else{
                print $fh "#SBATCH -c $numcores\n";
        }
}
print $fh "#SBATCH --exclusive\n";
print $fh "#SBATCH --mem $mem\n";

print $fh "#SBATCH --partition=thinnodes\n";

my $email = 'jmartin@onsager.ugr.es';
print $fh "#SBATCH --mail-type=END,FAIL\n";
print $fh "#SBATCH --mail-user=$email\n";


print $fh "#SBATCH --time=$time\n" if($time);

if($hybrid){
        my $numthreads;
        print $fh "\n";
        #if($numcores % 6 == 0){
        #       $numthreads = 6;
        #}else{
        #       $numthreads = $numcores;
        #}
        if($numcores >= 2){
                $numthreads=2;
        }else{
                $numthreads=1;
        }
        print $fh "export OMP_NUM_THREADS=$numthreads\n";
}

print $fh "\n";
my $variable="";
if($hybrid_variable){
        if($numcores < 24){
                $variable="-C $numcores";
        }else{
                $variable="-C 24";
        }
}
print $fh "srun @ARGV $variable\n";

print $fh "rm output.dot\n";
print $fh "touch output.dot\n";

close $fh;

system("sbatch $BATCHARGS $SCRIPT");
#print "MODO-DESARROLLO: el trabajo no se ha enviado a cola\n";


sub showhelp{
        print "\nSLANZARV: script que facilita el envÃ­o de trabajos a SLURM\n\n";

        exit 0;
}
